name: Nightly build
on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

jobs:
  linux:
    name: Linux build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        feature:
          - "stateless"
          - "stateless,parallel"
          - "pmtree-ft"
          - "pmtree-ft,parallel"
          - "fullmerkletree"
          - "fullmerkletree,parallel"
          - "optimalmerkletree"
          - "optimalmerkletree,parallel"
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.target }}
      - uses: Swatinem/rust-cache@v2
      - name: Install dependencies
        run: make installdeps
      - name: Cross build
        run: |
          cross build --release --target ${{ matrix.target }} --no-default-features --features ${{ matrix.feature }} --workspace
          mkdir release
          cp target/${{ matrix.target }}/release/librln* release/
          tar -czvf ${{ matrix.target }}-${{ matrix.feature }}-rln.tar.gz release/
      - name: Upload archive artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}-${{ matrix.feature }}-archive
          path: ${{ matrix.target }}-${{ matrix.feature }}-rln.tar.gz
          retention-days: 2

  macos:
    name: MacOS build
    runs-on: macos-latest
    strategy:
      matrix:
        feature:
          - "stateless"
          - "stateless,parallel"
          - "pmtree-ft"
          - "pmtree-ft,parallel"
          - "fullmerkletree"
          - "fullmerkletree,parallel"
          - "optimalmerkletree"
          - "optimalmerkletree,parallel"
        target:
          - x86_64-apple-darwin
          - aarch64-apple-darwin
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.target }}
      - uses: Swatinem/rust-cache@v2
      - name: Install dependencies
        run: make installdeps
      - name: Cross build
        run: |
          cross build --release --target ${{ matrix.target }} --no-default-features --features ${{ matrix.feature }} --workspace
          mkdir release
          cp target/${{ matrix.target }}/release/librln* release/
          tar -czvf ${{ matrix.target }}-${{ matrix.feature }}-rln.tar.gz release/
      - name: Upload archive artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}-${{ matrix.feature }}-archive
          path: ${{ matrix.target }}-${{ matrix.feature }}-rln.tar.gz
          retention-days: 2

  rln-wasm:
    name: Build rln-wasm
    runs-on: ubuntu-latest
    strategy:
      matrix:
        feature:
          - "default"
          - "parallel"
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown
      - name: Install nightly toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          targets: wasm32-unknown-unknown
          components: rust-src
      - uses: Swatinem/rust-cache@v2
        with:
          key: rln-wasm-${{ matrix.feature }}
      - name: Install dependencies
        run: make installdeps
      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      - name: Install binaryen
        run: |
          sudo apt-get update
          sudo apt-get install -y binaryen
      - name: Build rln-wasm package
        run: |
          if [[ ${{ matrix.feature }} == *parallel* ]]; then
            env RUSTFLAGS="-C target-feature=+atomics,+bulk-memory,+mutable-globals" \
            rustup run nightly wasm-pack build --release --target web --scope waku \
            --features ${{ matrix.feature }} -Z build-std=panic_abort,std
          else
            wasm-pack build --release --target web --scope waku
          fi

          sed -i.bak 's/rln-wasm/zerokit-rln-wasm/g' pkg/package.json && rm pkg/package.json.bak

          wasm-opt pkg/rln_wasm_bg.wasm -Oz --strip-debug --strip-dwarf \
          --remove-unused-module-elements --vacuum -o pkg/rln_wasm_bg.wasm

          mkdir release
          cp -r pkg/* release/
          tar -czvf rln-wasm-${{ matrix.feature }}.tar.gz release/
        working-directory: rln-wasm
      - name: Upload archive artifact
        uses: actions/upload-artifact@v4
        with:
          name: rln-wasm-${{ matrix.feature }}-archive
          path: rln-wasm/rln-wasm-${{ matrix.feature }}.tar.gz
          retention-days: 2

  rln-wasm-utils:
    name: Build rln-wasm-utils
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown
      - name: Install nightly toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          targets: wasm32-unknown-unknown
          components: rust-src
      - uses: Swatinem/rust-cache@v2
        with:
          key: rln-wasm-utils
      - name: Install dependencies
        run: make installdeps
      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      - name: Install binaryen
        run: |
          sudo apt-get update
          sudo apt-get install -y binaryen
      - name: Build rln-wasm-utils package
        run: |
          wasm-pack build --release --target web --scope waku

          sed -i.bak 's/rln-wasm-utils/zerokit-rln-wasm-utils/g' pkg/package.json && rm pkg/package.json.bak

          wasm-opt pkg/rln_wasm_utils_bg.wasm -Oz --strip-debug --strip-dwarf \
          --remove-unused-module-elements --vacuum -o pkg/rln_wasm_utils_bg.wasm

          mkdir release
          cp -r pkg/* release/
          tar -czvf rln-wasm-utils.tar.gz release/
        working-directory: rln-wasm-utils
      - name: Upload archive artifact
        uses: actions/upload-artifact@v4
        with:
          name: rln-wasm-utils-archive
          path: rln-wasm-utils/rln-wasm-utils.tar.gz
          retention-days: 2

  prepare-prerelease:
    name: Prepare pre-release
    needs: [linux, macos, rln-wasm, rln-wasm-utils]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: master
      - name: Download artifacts
        uses: actions/download-artifact@v4
      - name: Delete tag
        uses: dev-drprasad/delete-tag-and-release@v0.2.1
        with:
          delete_release: true
          tag_name: nightly
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create prerelease
        run: |
          start_tag=$(gh release list -L 2 --exclude-drafts | grep -v nightly | cut -d$'\t' -f3 | sed -n '1p')
          gh release create nightly --prerelease --target master \
            --title 'Nightly build ("master" branch)' \
            --generate-notes \
            --draft=false \
            --notes-start-tag $start_tag \
            *-archive/*.tar.gz \
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Delete artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          failOnError: false
          name: |
            *-archive
